---
- name: Time to install and configure Ansible Automation Platform
  hosts: control
  gather_facts: no
  vars:
    aap_bundle_sha_value: fa9e3ab55fc919d1aaac167f81bb9f841f214be047ea631d69eb4441712f46be
    #f5c834de9ad0b8ddbd0182b8f75127d4857e7c2a136e6c4f66ef5b92b2a41bb9
    #https://access.redhat.com/downloads/content/480/ver=2.4/rhel---9/2.4/x86_64/product-software
    #if you are getting a 403 error it is because there is a different checksum

  tasks:

    - name: Ensure we have the MY_CONTROLLER_URL
      loop: "{{ my_controller_server_data['instances'] }}"
      loop_control:
        extended: true
      when: ansible_loop.first
      ansible.builtin.set_stats:
        data:
          MY_CONTROLLER_URL: "{{ item['public_dns_name'] }}"

    - name: Ensure we have the MY_CONTROLLER_URL for use in this playbook
      loop: "{{ my_controller_server_data['instances'] }}"
      loop_control:
        extended: true
      when: ansible_loop.first
      ansible.builtin.set_fact:
        MY_CONTROLLER_URL: "{{ item['public_dns_name'] }}"

    - name: Check to see if the ansible platform is up if not run the installer
      block:
        - name: Validate that my platform is up
          register: hooyah
          delegate_to: localhost
          connection: local
          ansible.builtin.uri:
            url: https://{{ MY_CONTROLLER_URL }}/api/v2/ping/
            status_code: 200
            validate_certs: false

        - name: The Platform is already up nothing to 
          ansible.builtin.debug:
            msg: "Lucky us aap is already up"

        - name: Set a no install variable so we can skip the aap ./setup.sh
          ansible.builtin.set_stats:
            data:
              NO_INSTALL: true

      rescue:
        - name: Ensure we have a access token the Red Hat Customer portal
          register: access_token
          until: access_token is not failed
          retries: 1
          delay: 20
          ansible.builtin.uri:
            url: https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
            method: POST
            body_format: form-urlencoded
            return_content: true
            body:
              grant_type: "refresh_token"
              client_id: "rhsm-api"
              refresh_token: "{{ offline_token }}"

        - name: Ensure we have the AAP bundle
          register: download_aap_tarball
          until: download_aap_tarball is not failed
          retries: 15
          delay: 20
          become: true
          ansible.builtin.get_url:
            url: "https://api.access.redhat.com/management/v1/images/{{ aap_bundle_sha_value }}/download"
            headers:
              accept: "application/json"
              Authorization: "Bearer {{ access_token.json.access_token }}"
            dest: /var/lib/awx/aap.tar.gz
            checksum: "sha256: {{ aap_bundle_sha_value }}"

        - name: Ensure the aap bundle is opened up
          become: true
          ansible.builtin.unarchive:
            src: /var/lib/awx/aap.tar.gz
            dest: /var/lib/awx/
            remote_src: yes

        - name: Set a no install variable so we can skip the aap ./setup.sh
          ansible.builtin.set_stats:
            data:
              NO_INSTALL: false