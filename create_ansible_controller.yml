---
  - name: Create RHEL instances needed for Ansible Automation Controller
    hosts: localhost
    connection: local
    gather_facts: no
    vars:
       ec2_security_group_name: "{{ vpc_name }}_SECGRP"
       ec2_ansible_group: "{{ user_name }}"
       my_email_address: "{{ user_name }}@redhat.com"
       keyname: ''

    tasks:

      - name: Looking Up Subnet_id for {{ subnet_name }} if vpc_subnet_id doesn't exist
        register: subnet_id
        amazon.aws.ec2_vpc_subnet_info:
          region: "{{ region }}"
          filters:
            "tag:Name": "{{ subnet_name }}"

      - name: Setting vpc_subnet_id based on Lookup of {{ subnet_name }}
        when: vpc_subnet_id is undefined
        ansible.builtin.set_fact:
          vpc_subnet_id: "{{ subnet_id.subnets[0].id }}"

      - name: Creating {{ count }} AWS Ansible Controller VMs in {{ region }}
        register: ec2_vms
        amazon.aws.ec2_instance:
          name: "Ansible Controller"
          region: "{{ region }}"
          key_name: "{{ keyname }}"
          vpc_subnet_id: "{{ vpc_subnet_id }}"
          instance_type: "{{ instance_type }}"
          security_group: "{{ ec2_security_group_name }}"
          network:
            assign_public_ip: "{{ assign_public_ip }}"
          image_id: "{{ image }}"
          tags:
            Environment: AAP_Deployment
            AlwaysUp: "{{ alwaysup }}"
            Createdby: Ansible Controller
            Contact: "{{ my_email_address }}"
            DeletebBy: "{{ ec2_ansible_group }}"
          wait: true
          wait_timeout: 600

      - name: Create the storage volume we need
        loop: "{{ ec2_vms['instances'] }}"
        amazon.aws.ec2_vol:
          instance: "{{ item['instance_id'] }}"
          volume_size: 100
          name: "My Controller Volume"
          device_name: /dev/sdf
          region: "{{ region }}"
          delete_on_termination: yes
          volume_type: gp3
          iops: 3000

      - name: Ensure we have an elastic ip for each controller
        register: ec2_eips 
        loop: "{{ ec2_vms['instances'] }}"
        amazon.aws.ec2_eip:
          device_id: "{{ item['instance_id'] }}"
          region: "{{ region }}"
          release_on_disassociation: true
      
      - name: Wait 300 seconds for port 22 to become open and contain "OpenSSH"
        loop: "{{ ec2_eips['results'] }}"
        ansible.builtin.wait_for:
          port: 22
          host: "{{ item['public_ip'] }}"
          search_regex: OpenSSH
          delay: 10

      - name: "Get Ansible Controller instances in {{ region }}"
        register: instance_info
        amazon.aws.ec2_instance_info:
          region: "{{ region }}"
          filters:
            "tag:Name": "Ansible Controller"
            instance-state-name: [ "running"]

      - name: Capture useful server data
        ansible.builtin.set_stats:
          data:
            my_controller_server_data: "{{ instance_info }}"